#include <stdio.h>
#include <math.h>

//x,y좌표가 들어있는 점 구조체
struct point{
	int x;
	int y;
};

//거리가 최소인 점과 거리값이 들어있는 구조체
struct min_poi{
	struct point a;
	struct point b;

	float distance;	//점 a와 b의 distance
};


//점을 입력하는 함수
void In_Point(struct point p[], int max) {

	int i = 0;
	char c1 = 0;

	while ( i < max ) {
		printf("점의 x, y좌표를 차례대로 입력하시오 : ");
		scanf_s("%d %d", &p[i].x, &p[i].y);

		printf("점 %d = ( %d, %d )이 입력되었습니다.\n\n", i, p[i].x, p[i].y );		
		
		i++;
	}

};

//점 a와 b의 거리를 구하는 함수
float dis(struct point a, struct point b){
	return sqrt(pow((a.x - b.x), 2) + pow((a.y - b.y), 2));
}


//가장 근접한 점을 구하는 함수
void Closest_Pair(struct point p[], int max ) {
	//거리가 최소인 점을 p[0]과 p[1]로 초기화한다.
	struct min_poi Min;
	Min.a = p[0];
	Min.b = p[1];
	Min.distance = dis(Min.a, Min.b);


	for (int i = 0; i < max-1; i++){
		int j = i + 1;

		for (j; j < max; j++){
			float new = dis(p[i], p[j]);	//점 i와 점 j 사이의 거리 new
			//printf("점 %d와 점 %d 사이의 거리 %f \n",i, j, new);

			if (new < Min.distance){
				//printf("new가 더 작음\n");
				//printf("원래 최소값 Min에 들어가있는 좌표:( %d, %d )와 ( %d, %d ) \n", Min.a.x, Min.a.y, Min.b.x, Min.b.y);
				Min.a = p[i];
				Min.b = p[j];
				//printf("new의 점 2개 좌표:( %d, %d )와 ( %d, %d ) \n",p[i].x,p[i].y, p[j].x,p[j].y);
				//printf("Min의 값이 new로 바뀜:( %d, %d )와 ( %d, %d ) \n", Min.a.x, Min.a.y, Min.b.x, Min.b.y);

			}
		}
	}

	printf("가장 근접한 점은 점(%d, %d)와 점(%d, %d)이며 거리는 %f입니다.\n", Min.a.x, Min.a.y, Min.b.x, Min.b.y,Min.distance);

}

int main() {
	struct point p[16];
	int max = 16;	//배열의 크기 max
	In_Point(p,max);
	Closest_Pair(p, max);
}